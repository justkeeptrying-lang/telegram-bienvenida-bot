# Requisitos:
#   pip install python-telegram-bot==21.4
# Ejecutar:
#   python bot.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

# ===== LOGGING =====
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("mundovapo-bot")

# ===== CONFIGURA AQU√ç (TU INFO) =====
TOKEN = "8375588470:AAHuxxlHvHeDcnAYbs5pI39aZoqySIFUDaI"
CHANNEL_URL = "https://t.me/+jS_YKiiHgcw3OTRh"   # Enlace de invitaci√≥n o @usuario si es p√∫blico
GROUP_URL   = "https://t.me/+kL7eSPE27805ZGRh"   # Enlace de invitaci√≥n o @usuario si es p√∫blico
SORTEO_URL  = "https://www.mundovapo.cl"        # P√°gina con bases / formulario (temporal)
FORM_URL    = "https://docs.google.com/forms/d/e/1FAIpQLSct9QIex5u95sdnaJdXDC4LeB-WBlcdhE7GXoUVh3YvTh_MlQ/viewform"
WHATSAPP_URL = "https://www.mundovapo.cl"       # Cuando est√© listo: p.ej. https://wa.me/56993245860
WHATSAPP_TXT = "+56 9 9324 5860"                # Texto que mostramos en FAQ Env√≠os

# ===== TECLADOS =====
def kb_principal():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì£ Canal", url=CHANNEL_URL),
         InlineKeyboardButton("üí¨ Chat", url=GROUP_URL)],
        [InlineKeyboardButton("üìã Bases del sorteo", url=SORTEO_URL)],
        [InlineKeyboardButton("‚ùì Preguntas frecuentes", callback_data="faq_menu")],
        [InlineKeyboardButton("üü¢üì± Atenci√≥n por WhatsApp", url=WHATSAPP_URL)]
    ])

def kb_faq_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöö Env√≠os", callback_data="faq_envios")],
        [InlineKeyboardButton("üõ†Ô∏è Garant√≠as", callback_data="faq_garantias")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="faq_back")]
    ])

# ===== /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        nombre = update.effective_user.first_name or "amig@"
        mensaje = (
            f"üëã ¬°Bienvenid@, {nombre}!<br><br>"
            "Nos alegra mucho tenerte por aqu√≠ üåø<br>"
            "En plataformas como Instagram es muy dif√≠cil mantener una cuenta dedicada a vaporizadores, "
            "por eso decidimos crear esta comunidad exclusiva para quienes conf√≠an en nosotros üíö<br><br>"
            "üì£ <b>En el canal</b> podr√°s estar al tanto de:<br>"
            "‚Äî Nuevos lanzamientos<br>"
            "‚Äî Descuentos especiales<br>"
            "‚Äî Sorteos mensuales<br>"
            "‚Äî Y muchas sorpresas m√°s<br><br>"
            "üí¨ <b>En el chat</b> puedes:<br>"
            "‚Äî Resolver tus dudas<br>"
            "‚Äî Compartir experiencias con otros vapeadores<br>"
            "‚Äî Participar de una comunidad respetuosa, solo para mayores de 18 a√±os y libre de spam<br><br>"
            "Gracias por tu compra y por ser parte de este espacio ü§ù<br>"
            "¬°Esperamos que disfrutes tu estad√≠a!<br><br>"
            "üéÅ Recuerda que con tu compra <b>ya est√°s participando</b> en nuestro sorteo mensual. "
            "Solo debes revisar las bases y completar el formulario en el siguiente enlace üëá"
        )
        await update.message.reply_text(
            mensaje,
            reply_markup=kb_principal(),
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        log.exception("Error en /start: %s", e)

# ===== FAQ (router de callbacks) =====
async def faq_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    try:
        await cq.answer()
        data = cq.data or ""

        if data in ("faq_menu", "faq_back"):
            texto = (
                "‚ùì <b>Preguntas frecuentes</b><br><br>"
                "Selecciona una categor√≠a para ver m√°s informaci√≥n:"
            )
            await cq.edit_message_text(
                texto,
                reply_markup=kb_faq_menu(),
                disable_web_page_preview=True,
                parse_mode=ParseMode.HTML
            )
            return

        if data == "faq_envios":
            texto = (
                "‚úàÔ∏è <b>Env√≠os</b><br><br>"
                "Realizamos env√≠os a todo Chile mediante empresas de courier.<br>"
                "Los pedidos se despachan en un m√°ximo de 48 horas h√°biles.<br>"
                "Una vez enviado, recibir√°s un correo con el n√∫mero de seguimiento.<br><br>"
                f"üì© Si no has recibido tu tracking por correo, cont√°ctanos por WhatsApp: {WHATSAPP_TXT}"
            )
            await cq.edit_message_text(
                texto,
                reply_markup=kb_faq_menu(),
                disable_web_page_preview=True,
                parse_mode=ParseMode.HTML
            )
            return

        if data == "faq_garantias":
            texto = (
                "üõ†Ô∏è <b>Garant√≠as</b><br><br>"
                "Cada art√≠culo cuenta con una garant√≠a original del fabricante, la cual est√° detallada en la descripci√≥n del producto.<br><br>"
                "Las garant√≠as no cubren da√±os causados por mal uso del producto. "
                "Para solicitar una evaluaci√≥n, completa el formulario y espera nuestra respuesta en un m√°ximo de 48 horas h√°biles:<br>"
                f"üîó <a href=\"{FORM_URL}\">Formulario de garant√≠a</a><br><br>"
                "üì¨ Si necesitas m√°s informaci√≥n sobre el estado de tu garant√≠a, puedes contactarnos en cualquier momento al correo "
                "<a href=\"mailto:soporte@mundovapo.cl\">soporte@mundovapo.cl</a>, "
                "a trav√©s del chat de nuestra tienda o por WhatsApp."
            )
            await cq.edit_message_text(
                texto,
                reply_markup=kb_faq_menu(),
                disable_web_page_preview=True,
                parse_mode=ParseMode.HTML
            )
            return

        # Cualquier otra callback: volver al men√∫ FAQ
        await cq.edit_message_text(
            "‚ùì <b>Preguntas frecuentes</b><br>Selecciona una categor√≠a:",
            reply_markup=kb_faq_menu(),
            disable_web_page_preview=True,
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        log.exception("Error en faq_router (%s): %s", getattr(cq, "data", "?"), e)
        try:
            await cq.edit_message_text(
                "‚ö†Ô∏è Ocurri√≥ un error al cargar la informaci√≥n. Intenta de nuevo.",
                reply_markup=kb_faq_menu(),
                parse_mode=ParseMode.HTML
            )
        except Exception:
            pass

# ===== MAIN =====
def main():
    if not TOKEN or TOKEN.startswith("PEGA_AQUI"):
        raise RuntimeError("‚ö†Ô∏è Debes pegar tu TOKEN de @BotFather en la variable TOKEN.")

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(faq_router, pattern="^faq"))

    log.info("‚úÖ Bot iniciado. Presiona Ctrl+C para detener.")
    app.run_polling()

if __name__ == "__main__":
    main()
